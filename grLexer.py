# Generated from gr.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2*")
        buf.write("\u00a3\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\3\2\3\2\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13")
        buf.write("\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3")
        buf.write("\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3")
        buf.write("\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\2\2*\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("\3\2\2\2\u00a2\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t")
        buf.write("\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3")
        buf.write("\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2")
        buf.write("\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2")
        buf.write("\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2")
        buf.write("\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2")
        buf.write("\2\2\3S\3\2\2\2\5U\3\2\2\2\7W\3\2\2\2\tY\3\2\2\2\13[\3")
        buf.write("\2\2\2\r]\3\2\2\2\17_\3\2\2\2\21a\3\2\2\2\23c\3\2\2\2")
        buf.write("\25e\3\2\2\2\27g\3\2\2\2\31i\3\2\2\2\33k\3\2\2\2\35m\3")
        buf.write("\2\2\2\37o\3\2\2\2!q\3\2\2\2#s\3\2\2\2%u\3\2\2\2\'w\3")
        buf.write("\2\2\2)y\3\2\2\2+{\3\2\2\2-}\3\2\2\2/\177\3\2\2\2\61\u0081")
        buf.write("\3\2\2\2\63\u0083\3\2\2\2\65\u0085\3\2\2\2\67\u0087\3")
        buf.write("\2\2\29\u0089\3\2\2\2;\u008b\3\2\2\2=\u008d\3\2\2\2?\u008f")
        buf.write("\3\2\2\2A\u0091\3\2\2\2C\u0093\3\2\2\2E\u0095\3\2\2\2")
        buf.write("G\u0097\3\2\2\2I\u0099\3\2\2\2K\u009b\3\2\2\2M\u009d\3")
        buf.write("\2\2\2O\u009f\3\2\2\2Q\u00a1\3\2\2\2ST\7~\2\2T\4\3\2\2")
        buf.write("\2UV\7,\2\2V\6\3\2\2\2WX\7-\2\2X\b\3\2\2\2YZ\7*\2\2Z\n")
        buf.write("\3\2\2\2[\\\7+\2\2\\\f\3\2\2\2]^\7\60\2\2^\16\3\2\2\2")
        buf.write("_`\7&\2\2`\20\3\2\2\2ab\7c\2\2b\22\3\2\2\2cd\7d\2\2d\24")
        buf.write("\3\2\2\2ef\7e\2\2f\26\3\2\2\2gh\7f\2\2h\30\3\2\2\2ij\7")
        buf.write("g\2\2j\32\3\2\2\2kl\7h\2\2l\34\3\2\2\2mn\7i\2\2n\36\3")
        buf.write("\2\2\2op\7j\2\2p \3\2\2\2qr\7k\2\2r\"\3\2\2\2st\7l\2\2")
        buf.write("t$\3\2\2\2uv\7m\2\2v&\3\2\2\2wx\7n\2\2x(\3\2\2\2yz\7o")
        buf.write("\2\2z*\3\2\2\2{|\7p\2\2|,\3\2\2\2}~\7q\2\2~.\3\2\2\2\177")
        buf.write("\u0080\7r\2\2\u0080\60\3\2\2\2\u0081\u0082\7s\2\2\u0082")
        buf.write("\62\3\2\2\2\u0083\u0084\7t\2\2\u0084\64\3\2\2\2\u0085")
        buf.write("\u0086\7u\2\2\u0086\66\3\2\2\2\u0087\u0088\7v\2\2\u0088")
        buf.write("8\3\2\2\2\u0089\u008a\7w\2\2\u008a:\3\2\2\2\u008b\u008c")
        buf.write("\7x\2\2\u008c<\3\2\2\2\u008d\u008e\7y\2\2\u008e>\3\2\2")
        buf.write("\2\u008f\u0090\7z\2\2\u0090@\3\2\2\2\u0091\u0092\7{\2")
        buf.write("\2\u0092B\3\2\2\2\u0093\u0094\7|\2\2\u0094D\3\2\2\2\u0095")
        buf.write("\u0096\7^\2\2\u0096F\3\2\2\2\u0097\u0098\7]\2\2\u0098")
        buf.write("H\3\2\2\2\u0099\u009a\7_\2\2\u009aJ\3\2\2\2\u009b\u009c")
        buf.write("\7`\2\2\u009cL\3\2\2\2\u009d\u009e\7}\2\2\u009eN\3\2\2")
        buf.write("\2\u009f\u00a0\7\177\2\2\u00a0P\3\2\2\2\u00a1\u00a2\7")
        buf.write("G\2\2\u00a2R\3\2\2\2\3\2\2")
        return buf.getvalue()


class grLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'|'", "'*'", "'+'", "'('", "')'", "'.'", "'$'", "'a'", "'b'", 
            "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", 
            "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", 
            "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'\\'", "'['", "']'", 
            "'^'", "'{'", "'}'", "'E'" ]

    symbolicNames = [ "<INVALID>",
 ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39" ]

    grammarFileName = "gr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


